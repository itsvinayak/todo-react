{"version":3,"sources":["components/app.js","serviceWorker.js","index.js"],"names":["App","props","state","userInput","list","value","this","setState","id","Math","random","push","key","updateList","filter","item","Container","Row","style","display","justifyContent","alignItems","fontSize","fontWeight","Col","md","span","offset","InputGroup","className","FormControl","placeholder","size","onChange","updateInput","target","aria-label","aria-describedby","Append","Button","variant","onClick","addItem","ListGroup","map","Item","action","deleteItem","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.13f9acf2.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n\nclass App extends Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput : \"\",\n      list:[]\n    }\n  }\n\n  updateInput(value){\n    this.setState({\n      userInput: value,\n    });\n  }\n\n  addItem(){\n    if(this.state.userInput !== '' ){\n      const userInput = {\n        id :  Math.random(),\n        value : this.state.userInput\n      };\n      const list = [...this.state.list];\n      list.push(userInput);\n\n      this.setState({\n        list,\n        userInput:\"\"\n      });\n    }\n  }\n\n  deleteItem(key){\n    const list = [...this.state.list];\n    const updateList = list.filter(item => item.id !== key);\n\n    this.setState({\n      list:updateList,\n    });\n\n  }\n\n  render(){\n    return(<Container>\n\n          <Row style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  fontSize: '3rem',\n                  fontWeight: 'bolder',\n                }}\n                >TODO LIST\n            </Row>\n\n           <hr/>\n          <Row>\n          <Col md={{ span: 5, offset: 4 }}>\n\n          <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"add item . . . \"\n            size=\"lg\"\n            value = {this.state.userInput}\n            onChange = {item => this.updateInput(item.target.value)}\n            aria-label=\"add something\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <InputGroup.Append>\n            <Button\n              variant=\"dark\"\n              size=\"lg\"\n              onClick = {()=>this.addItem()}\n              >\n              ADD\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n\n     </Col>\n   </Row>\n   <Row>\n     <Col md={{ span: 5, offset: 4 }}>\n        <ListGroup>\n         {this.state.list.map(item => {return(\n\n            <ListGroup.Item variant=\"dark\" action  onClick = { () => this.deleteItem(item.id) }>\n              {item.value}\n            </ListGroup.Item>\n\n         )})}\n        </ListGroup>\n     </Col>\n   </Row>\n     </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}